apiserver:
  image:
    repository: docker.io/dependencytrack/apiserver
    tag: 4.8.2
  resources:
    limits:
      cpu: "3"
      memory: 12Gi
    requests:
      cpu: "1"
      memory: 4608Mi
  configEnvFrom: []
  secretEnvFrom: []
  configuration:
    ALPINE_CORS_ENABLED: true
    ALPINE_CORS_ALLOW_ORIGIN: "*"
    ALPINE_CORS_ALLOW_METHODS: GET, POST, PUT, DELETE, OPTIONS, HEAD
    ALPINE_CORS_ALLOW_HEADERS: Origin, Content-Type, Authorization, X-Requested-With, Content-Length, Accept, Origin, X-Api-Key, X-Total-Count, *
    ALPINE_CORS_EXPOSE_HEADERS: Origin, Content-Type, Authorization, X-Requested-With, Content-Length, Accept, Origin, X-Api-Key, X-Total-Count
    ALPINE_CORS_ALLOW_CREDENTIALS: true
    ALPINE_CORS_MAX_AGE: 3600
  storage:
    class: "standard"
    size: "50Gi"
  service:
    annotations: {}
    type: ClusterIP
  baseurl: "https://127.0.0.1"
  probes:
    periodSeconds: 30
    timeoutSeconds: 20
    successThreshold: 1
    failureThreshold: 4
  metrics:
    enabled: true
    grafana:
      # create configmap holding the grafana dashboard visualizing the metrics
      dashboard: true
      namespace: monitoring
      datasourceUid: Prometheus
    serviceMonitor:
      # whether to create a monitoring.coreos.com/v1/ServiceMonitor for use with the Prometheus Operator
      enabled: false
      scrapeInterval: 30s
      scrapeTimeout: 10s

frontend:
  image:
    repository: docker.io/dependencytrack/frontend
    tag: 4.8.1
  resources:
    limits:
      cpu: "1"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  configEnvFrom: []
  secretEnvFrom: []
  configuration: {}
  service:
    annotations: {}
    type: ClusterIP
  probes:
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 20
    successThreshold: 1
    failureThreshold: 4

ingress:
  enabled: true
  annotations: {}
  host: 127.0.0.1
  class:

labels: []
